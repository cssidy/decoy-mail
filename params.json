{
  "name": "Decoy Mail",
  "tagline": "Diverting today's spam, preventing tomorrow's spam.",
  "body": "# Decoy Mail\r\n#### Diverting today's spam, preventing tomorrow's spam.\r\n\r\n### What issue does Decoy Mail address?\r\n\r\nThe spam problem.\r\n\r\n### What is the solution?\r\n\r\nDecoy Mail is spam prevention software for ISP's mailservers and email-clients. Decoy Mail prevents spam by employing autonomous, distributed, and intelligent software agents to engage with spammers and flood their servers with convincingly gullible (but false) leads. Ultimately, this wastes spammers' time, induces spammer frustration, reduces spammers' motivation to spam, and render careers in spamming unprofitable to pursue. Decoy Mail prevents future spam.\r\n\r\n### About this software\r\n\r\nDecoy Mail is written in Python 3.5 with PyCharm Community Edition. This version is designed to log into Gmail mail servers. It requires an Internet connection and Gmail account and credentials to run. I am trying to avoid 3rd party libraries/APIs as much as possible. Eventually this software will have to be tailored to run on diverse systems, communicating with other diverse systems with their own unique configurations (which may be different than Google's).\r\n\r\nThis idea is not necessarily new. Check out scam-baiting, a popular computer nerd hobby on the [419 Eater Forums](http://www.419eater.com/) for an understanding of what this software is trying to automate. And, check out this disbanded Perl project of a similar nature, [Autobait](http://www.autobait.com/).\r\n\r\n### Flow chart\r\n\r\n[![flow chart.png](http://s10.postimg.org/4czq6yyk9/flow_chart.png)](http://postimg.org/image/d80khhncl/)\r\n\r\n### Video demonstration\r\n\r\nThis proof of concept logs into a Gmail account, enters the inbox, starting at the first email looks through the list, fetches the first email it finds with a spam keyword, then composes and sends a new email to the sender of the spam.\r\n\r\nQuick tour of the files:\r\n\r\n[![Alt text for your video](http://img.youtube.com/vi/HqinRVduHdA/0.jpg)](http://www.youtube.com/watch?v=HqinRVduHdA)\r\n\r\nFetching, matching, and responding to an email:\r\n\r\n[![Alt text for your video](http://img.youtube.com/vi/p-Qi0shD78Y/0.jpg)](http://www.youtube.com/watch?v=p-Qi0shD78Y)\r\n\r\n\r\n### Milestones (and to-do list)\r\n\r\n- [x] ~~Flow chart~~\r\n- [x] ~~Proof of concept~~\r\n- [ ] Obfuscate bot's sent email meta data\r\n- [ ] Fine tune SMTP email's appearance, make it look legitimate\r\n- [ ] Compose email that is in response to the previous email (as part of a thread, not a new email)\r\n- [ ] Loop through mailbox until nothing to respond to or sort, then print report\r\n- [ ] Create and query database of email spam messages and appropriately gullible responses\r\n- [ ] Success and failure rate tracking via the database\r\n- [ ] Multiple personalities and their own set of responses\r\n- [ ] Learn new conversations and responses\r\n- [ ] Choose the best conversations based on previous conversation situations\r\n- [ ] Attach images to emails if requested\r\n- [ ] Have VoIP conversations with spammers with pre-recorded audio clips\r\n- [ ] Automatically DDoS links found inside email spam messages\r\n- [ ] Create a software tailored for mailservers (Linux, considering it powers most of the Internet?) or email clients (Gmail gadget? Thunderbird plugin? Outlook Ad-in?)\r\n- [ ] Test software\r\n- [ ] Collect statistics\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}